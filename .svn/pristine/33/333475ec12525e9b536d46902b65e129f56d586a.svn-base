//
//  ViewController.m
//  Telecontroller
//
//  Created by hk on 17/5/12.
//  Copyright © 2017年 hk. All rights reserved.
//

#import "ViewController.h"
#import "EADSessionController.h"
#import <ExternalAccessory/ExternalAccessory.h>
#define BUNDLEID @"com.haoke.tele"
#import "ModeViewController.h"
@interface ViewController ()<buttonDELE>
{
    BOOL isLink;
    BOOL isMute;
    NSTimer *timer;
    int timerInt;
    int zoneInt;
}
@property (weak, nonatomic) IBOutlet UIButton *sixButton;
@property (weak, nonatomic) IBOutlet UIButton *fireButton;
@property (weak, nonatomic) IBOutlet UIButton *fourButton;
@property (weak, nonatomic) IBOutlet UIButton *threeButton;
@property (weak, nonatomic) IBOutlet UIButton *twoButton;
@property (weak, nonatomic) IBOutlet UIButton *oneButton;
@property (weak, nonatomic) IBOutlet UIButton *zoneHeadButton;
@property (weak, nonatomic) IBOutlet UIButton *zoneSelectButton;
@property (nonatomic, strong) EADSessionController *eaSessionController;
@property (nonatomic, strong) NSArray *supportedProtocolsStrings;
@property (nonatomic, strong) NSMutableArray *accessoryList;
@property(nonatomic,strong)NSMutableDictionary *dataDict;
@property (nonatomic, strong) NSMutableArray *frequencyArray;
@end

@implementation ViewController
- (IBAction)zoneHeadButton:(id)sender {
}
- (IBAction)addVoice:(id)sender {
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x10,0x01,0x14};
        [self sendData:buff];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }
}
- (IBAction)deleVoice:(id)sender {
    
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x10,0x02,0x15};
        
        [self sendData:buff];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }

}
- (IBAction)lastMusic:(id)sender {
    
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x10,0x03,0x16};
        [self sendData:buff];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }

}
- (IBAction)nextMusic:(id)sender {
    
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x10,0x05,0x18};
        [self sendData:buff];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }

}
- (IBAction)playPauseButton:(id)sender {
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x10,0x04,0x17};
        [self sendData:buff];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }

    
}
- (IBAction)bandButton:(id)sender {
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x11,0x01,0x15};
        [self sendData:buff];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }

   
}
- (IBAction)muteButton:(id)sender {
    if (isLink) {
        if (isMute) {
            Byte buff[] = {0xaa,0x55,0x03,0x12,0x02,0x17};
            [self sendData:buff];
        }else{
            Byte buff[] = {0xaa,0x55,0x03,0x12,0x01,0x16};
            [self sendData:buff];
        }

    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }

}
- (IBAction)offButton:(id)sender {
    
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x15,0x01,0x19};
        [self sendData:buff];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }

}
- (IBAction)oneButton:(id)sender {
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x16,0x01,0x1a};
        [self sendData:buff];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }
}
- (IBAction)twoButton:(id)sender {
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x16,0x02,0x1b};
        [self sendData:buff];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }
}
- (IBAction)threeButton:(id)sender {
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x16,0x03,0x1c};
        [self sendData:buff];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }
}
- (IBAction)fourButton:(id)sender {
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x16,0x04,0x1d};
        [self sendData:buff];

    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }

}

- (IBAction)fireBUtton:(id)sender {
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x16,0x05,0x1e};
        [self sendData:buff];
        
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }
}
- (IBAction)sixButton:(id)sender {
    if (isLink) {
        Byte buff[] = {0xaa,0x55,0x03,0x16,0x06,0x1f};
        [self sendData:buff];
        
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }
}
-(void)zoneChange{
    if (isLink) {
        
        switch (zoneInt) {
            case 1:
            {
                Byte buff[] = {0xaa,0x55,0x03,0x02,0x02,0x07};
                [self sendData:buff];
            }
                break;
            case 2:
            {
                Byte buff[] = {0xaa,0x55,0x03,0x02,0x03,0x08};
                [self sendData:buff];
            }
                break;
            case 3:
            {
                Byte buff[] = {0xaa,0x55,0x03,0x02,0x01,0x06};
                [self sendData:buff];
            }
                break;
            default:
                break;
        }
        
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }
}
-(void)getData{
    switch (timerInt) {
        case 0:
        {
            Byte buff[] = {0xaa,0x55,0x03,0x20,0x01,0x24};
//            [self sendData:buff];
            [[EADSessionController sharedController] writeData:[NSData dataWithBytes:buff length:sizeof(buff)]];
            
            
        }
            break;
        case 1:
        {
            Byte buff[] = {0xaa,0x55,0x03,0x21,0x01,0x25};
            [self sendData:buff];
        }
            break;
        case 2:
        {
            Byte buff[] = {0xaa,0x55,0x03,0x22,0x01,0x26};
            [self sendData:buff];
        }
            break;
        case 3:
        {
            Byte buff[] = {0xaa,0x55,0x03,0x23,0x01,0x27};
            [self sendData:buff];
        }
            break;
        case 4:
        {
            Byte buff[] = {0xaa,0x55,0x03,0x24,0x01,0x28};
            [self sendData:buff];
        }
            break;
        default:
            break;
    }
    
    timerInt++;
    if (timerInt == 5) {
        timerInt = 0;
    }
}
- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    timerInt = 0;
    zoneInt = 1;
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(_accessoryDidConnect:) name:EAAccessoryDidConnectNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(_accessoryDidDisconnect:) name:EAAccessoryDidDisconnectNotification object:nil];
    [[EAAccessoryManager sharedAccessoryManager] registerForLocalNotifications];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(_sessionDataReceived:) name:EADSessionDataReceivedNotification object:nil];
    _eaSessionController = [EADSessionController sharedController];
    
   // _accessoryList = [[NSMutableArray alloc] initWithArray:[[EAAccessoryManager sharedAccessoryManager] connectedAccessories]];
    NSBundle *mainBundle = [NSBundle mainBundle];
    self.supportedProtocolsStrings = [mainBundle objectForInfoDictionaryKey:@"UISupportedExternalAccessoryProtocols"];
    _accessoryList = [[NSMutableArray alloc] initWithArray:[[EAAccessoryManager sharedAccessoryManager] connectedAccessories]];
    
    if (_accessoryList.count != 0) {
        [_eaSessionController setupControllerForAccessory:_accessoryList[0]
                                       withProtocolString:self.supportedProtocolsStrings[0]];
        [_eaSessionController openSession];
        isLink = YES;
        [self initTimer];
    }
    
//    _dataDict = [NSMutableDictionary dictionary];
    _frequencyArray = [NSMutableArray array];
//    [_dataDict setDictionary:[[NSUserDefaults standardUserDefaults] objectForKey:@"userData"]];
    [_frequencyArray addObjectsFromArray:[[NSUserDefaults standardUserDefaults] objectForKey:@"frequency"]];
    NSArray *buttonArray = @[_oneButton,_twoButton,_threeButton,_fourButton,_fireButton,_sixButton];
    for (int i = 0; i< _frequencyArray.count; i++) {
        [(UIButton*)buttonArray[i] setTitle:[NSString stringWithFormat:@"%@",_frequencyArray[i]] forState:UIControlStateNormal];
    }

    

    
   

//    dispatch_async(dispatch_get_main_queue(), ^{
    _zoneSelectButton.titleLabel.numberOfLines = 0;
    _zoneSelectButton.titleLabel.font = [UIFont systemFontOfSize:14];
    _zoneSelectButton.titleLabel.textAlignment = NSTextAlignmentCenter;
    [_zoneSelectButton setTitle:@"ZONE\nSELETLT" forState:UIControlStateNormal];
    [_zoneSelectButton addTarget:self action:@selector(zoneChange) forControlEvents:UIControlEventTouchUpInside];
//    });
   
    Byte buff[] = {0xaa,0x55,0x03,0x20,0x01,0x24};
    NSLog(@"buff = %ld",sizeof(buff));
}



-(void)sendData:(Byte*)bytes{
    [[EADSessionController sharedController] writeData:[NSData dataWithBytes:bytes length:6]];
//    NSLog(@"发送bytes长度  %ld = %x,%x,%x,%x,%x,%x",sizeof(bytes),bytes[0],bytes[1],bytes[2],bytes[3],bytes[4],bytes[5]);
}
- (void)_sessionDataReceived:(NSNotification *)notification{
    NSDictionary *dataDict = notification.userInfo;
    NSData *data;
    EADSessionController *sessionController = (EADSessionController *)[notification object];
    uint32_t bytesAvailable = 0;
    
    while ((bytesAvailable = (uint32_t)[sessionController readBytesAvailable]) > 0) {
        data = [sessionController readData:bytesAvailable];
    }
    
    if (((const char *)[data bytes])[3] != 3) {
        NSLog(@"接收byte = %x,%x,%x,%x,%x,%x,%x",((const char *)[data bytes])[0],((const char *)[data bytes])[1],((const char *)[data bytes])[2],((const char *)[data bytes])[3],((const char *)[data bytes])[4],((const char *)[data bytes])[5],((const char *)[data bytes])[6]);
    }
    
    int address = ((const char *)[data bytes])[3];
    switch (address) {
        case 0x01:
        {
            BOOL isFind = NO;
            UInt16 a = ((const char *)[data bytes])[4];
            UInt16 b = ((const char *)[data bytes])[5];
            UInt16 c = (a << 8) + b;
            NSString *cStr = [NSString stringWithFormat:@"%.2f",c/100.];
            NSArray *array1 = [NSArray arrayWithArray:_frequencyArray];
            for (int i = 0; i <array1.count; i++) {
                if ([cStr isEqualToString: array1[i]]) {
                    isFind = YES;
                }
            }
            if (!isFind) {
                if (array1.count == 6) {
                    [_frequencyArray removeObjectAtIndex:0];
                }
                [_frequencyArray addObject:cStr];
                [_frequencyArray sortUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) {
                    if ([obj1 floatValue] < [obj2 floatValue]) {
                        return NSOrderedDescending;
                    } else if ([obj1 floatValue] > [obj2 floatValue]) {
                        return NSOrderedAscending;
                    }
                    return NSOrderedSame;
                    //        return [obj1 integerValue] > [obj2 integerValue];//简写方式
                }];
                [[NSUserDefaults standardUserDefaults]setObject:_frequencyArray forKey:@"frequency"];
            }
            NSArray *buttonArray = @[_oneButton,_twoButton,_threeButton,_fourButton,_fireButton,_sixButton];
            for (int i = 0; i< _frequencyArray.count; i++) {
                [(UIButton*)buttonArray[i] setTitle:[NSString stringWithFormat:@"%.2f",[_frequencyArray[i] floatValue]] forState:UIControlStateNormal];
            }
        }
            break;
        case 0x02:
        {
            UInt16 b = ((const char *)[data bytes])[5];
            NSString *bStr = [NSString stringWithFormat:@"%d",b];
            [[NSUserDefaults standardUserDefaults]setObject:bStr forKey:@"zoneSeletct"];
            
            if ([bStr isEqualToString:@"1"]) {
                [_zoneHeadButton setTitle:@"ZONE 1" forState:UIControlStateNormal];
                zoneInt = 1;
            }else if([bStr isEqualToString:@"2"]){
                [_zoneHeadButton setTitle:@"ZONE 2" forState:UIControlStateNormal];
                zoneInt = 2;
            }else if([bStr isEqualToString:@"3"]){
                [_zoneHeadButton setTitle:@"ZONE 3" forState:UIControlStateNormal];
                zoneInt = 3;
            }
        }
            break;
        case 0x03:
        {
            UInt16 b = ((const char *)[data bytes])[5];
            NSString *bStr = [NSString stringWithFormat:@"%d",b];
            if ([bStr isEqualToString:@"1"]) {
                isMute = YES;
            }else{
                isMute = NO;
            }
            [[NSUserDefaults standardUserDefaults]setObject:bStr forKey:@"isMute"];//静音1非静音0
        }
            break;
        case 0x04:
        {
            UInt16 b = ((const char *)[data bytes])[5];
            NSString *bStr = [NSString stringWithFormat:@"%d",b];
            [[NSUserDefaults standardUserDefaults]setObject:bStr forKey:@"nowMode"];
        }
            break;
        default:
            break;
    }
}


- (IBAction)modeButton:(id)sender {
    
    if (isLink) {
        [self performSegueWithIdentifier:@"mySegue" sender:nil];
    }else{
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"BTdisconnect" message:@"Please go to the system settings to connect Bluetooth" delegate:nil cancelButtonTitle:@"cancel" otherButtonTitles:nil, nil];
        [alertView show];
    }
    
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([segue.identifier isEqualToString:@"mySegue"])
    {
        ModeViewController* vc = (ModeViewController*)segue.destinationViewController;
        vc.delegate = self;
        NSLog(@"获取跳转到mySegue");
    }
}
-(void)buttonNumber:(int )number{
    switch (number) {
        case 1:
        {
            Byte buff[] = {0xaa,0x55,0x03,0x13,0x01,0x17};
            [self sendData:buff];
        }
            break;
        case 2:
        {
            Byte buff[] = {0xaa,0x55,0x03,0x13,0x02,0x18};
            [self sendData:buff];
        }
            break;
        case 3:
        {
            Byte buff[] = {0xaa,0x55,0x03,0x13,0x03,0x19};
            [self sendData:buff];
        }
            break;
        case 4:
        {
            Byte buff[] = {0xaa,0x55,0x03,0x13,0x04,0x1a};
            [self sendData:buff];
        }
            break;
        case 5:
        {
            Byte buff[] = {0xaa,0x55,0x03,0x13,0x05,0x1b};
            [self sendData:buff];
        }
            break;
        default:
            break;
    }
}
- (UIStatusBarStyle)preferredStatusBarStyle
{
    return UIStatusBarStyleLightContent;
}
#pragma mark Internal
- (void)_accessoryDidConnect:(NSNotification *)notification {
    NSLog(@"连接成功");
    if (!isLink) {
        EAAccessory *connectedAccessory = [[notification userInfo] objectForKey:EAAccessoryKey];
        [_eaSessionController setupControllerForAccessory:connectedAccessory
                                       withProtocolString:BUNDLEID];
        [_eaSessionController openSession];
        isLink = YES;
        [self initTimer];
        [_zoneHeadButton setTitle:@"BT connected" forState:UIControlStateNormal];
    }
}
- (void)_accessoryDidDisconnect:(NSNotification *)notification {
    NSLog(@"断开连接");
    [_accessoryList removeAllObjects];
    [_eaSessionController closeSession];
    isLink = NO;
    [_zoneHeadButton setTitle:@"BTdicconnect" forState:UIControlStateNormal];
    [self deallocTimer];
}
//- (void)viewDidUnload {
//    [[NSNotificationCenter defaultCenter] removeObserver:self name:EAAccessoryDidConnectNotification object:nil];
//    [[NSNotificationCenter defaultCenter] removeObserver:self name:EAAccessoryDidDisconnectNotification object:nil];
//    [[NSNotificationCenter defaultCenter] removeObserver:self name:EADSessionDataReceivedNotification object:nil];
//    [_eaSessionController closeSession];
//    isLink = NO;
//    [_zoneHeadButton setTitle:@"BTdicconnect" forState:UIControlStateNormal];
//    [self deallocTimer];
//    [super viewDidUnload];
//    
//}
-(void)initTimer{
    if (!timer) {
        timer = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(getData) userInfo:nil repeats:YES];
    }
}
-(void)deallocTimer{
    [timer invalidate];
    timer = nil;
}
-(void)dealloc{
    [_eaSessionController closeSession];
    isLink = NO;
    [_zoneHeadButton setTitle:@"BTdicconnect" forState:UIControlStateNormal];
    [self deallocTimer];
}
-(void)viewWillAppear:(BOOL)animated{
    if (isLink) {
        [self initTimer];
    }
}
-(void)viewWillDisappear:(BOOL)animated{
    [self deallocTimer];
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
